

// ***************–ü—Ä–æ—Ç–æ—Ç–∏–ø–Ω–µ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —Ç–∞ –º–µ—Ç–æ–¥ Object.create***************\\
// const user = {
//     name: 'Alice',
//     age: 23,
//     sayHello() {
//         console.log(`Hello my name is ${this.name}`);
//     },
//     getAge() {
//         console.log(`my age ${this.age}`);
//     }
// }


// const student = Object.create(user);

// console.log(student);
// console.log(Object.getPrototypeOf(student) === user);
// student.sayHello()


// student.name = 'Kate';
// console.log(student);
// student.sayHello()

// console.log(student)
// student.getAge();


// student.age = 30;
// console.log(student)
// student.getAge();









// *********************************ES6 Class*********************************\\




// *****–ü—É–±–ª—ñ—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏***** \\
// class User {
//     name;

//     constructor(name) {
//         this.name = name;
//     }

//     showName() {
//         console.log(`Hello my name is ${this.name}`);
//     }
// }

// const student = new User('Alice');
// student.showName()









// *****–ü—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏***** \\
// class User {
//     name;
//     #password;

//     constructor(name, password) {
//         this.name = name;
//         this.#password = password;
//     }

//     showName() {
//         if (this.#checkPassword()) {
//             console.log(`Hello my name is ${this.name}`);
//         } else {
//             console.log("Who are you ?üßê");
//         }
//     }

//     #checkPassword() {
//         const password = prompt('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å!');

//         return password === this.#password;
//     }
// }


// const student = new User('Alice', 'qwerty111');
// student.showName()



// class Animal {
//     constructor () {
//         console.log('constructor!')
//     }

//     load () {
//         console.log('Loaded!')
//     }
// }

// const animal = new Animal();
// animal.load()




// ******–ì–µ—Ç—Ç–µ—Ä–∏ —ñ —Å–µ—Ç—Ç–µ—Ä–∏****** \\

// class User {
//     name;
//     #password;
//     #email;

//     constructor(name, password, email) {
//         this.name = name;
//         this.#password = password;
//         this.#email = email;
//     }

//     showName() {
//         if (this.#checkPassword()) {
//             console.log(`Hello my name is ${this.name}`);
//         } else {
//             console.log("Who are you ?üßê");
//         }
//     }

//     #checkPassword() {
//         const password = prompt('–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å!');

//         return password === this.#password;
//     }

//     get email() {
//         if (this.#checkPassword()) {
//             return this.#email
//         }
//     }

//     set email(newEmail) {
//         if (this.#checkPassword()) {
//             this.#email = newEmail;
//         }
//     }
// }

// const student = new User('Alice', 'qwerty111', 'test@gmail.com');
// // console.log(student.email);

// student.email = 'new@gmail.com';

// console.log(student.email);










// *****–°—Ç–∞—Ç–∏—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏***** \\
// –†–æ–∑–≥–ª—è–Ω–µ–º–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–º—É –∑–∞–≤–¥–∞–Ω—ñ (Task-2)










// **********–ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤********* \\


// class User {
//     name;
//     #password;
//     #email;
//     constructor(name, password, email) {
//         this.name = name;
//         this.#password = password;
//         this.#email = email;
//     }

//     showName() {
//         if (this.#checkPassword()) {
//             console.log(`Hello my name is ${this.name}`);
//         } else {
//             console.log("Who are you ?üßê");
//         }
//     }

//     #checkPassword() {
//         const password = prompt();
//         return password === this.#password;
//     }

//     get email() {
//         if (this.#checkPassword()) {
//             return this.#email
//         }
//     }

//     set email(newEmail) {
//         if (this.#checkPassword()) {
//             this.#email = newEmail;
//         }
//     }
// }




// class Student extends User {
//     points;

//     constructor(name, password, email, points) {
//         super(name, password, email)
//         this.points = points;
//     }
//     getPoints() {
//         console.log(`${this.name} has ${this.points} points`);
//     }
// }



// const student = new Student('Alice', 'qwerty111', 'test@gmail.com', 38);
// // student.showName()
// student.getPoints()








// ***********************–ü—Ä–∞–∫—Ç–∏–∫–∞*********************** \\


// *******Task-1****** \\
// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Rectangle, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ width —Ç–∞ height, –∞ —Ç–∞–∫–æ–∂ –≥–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏ –¥–ª—è —Ü–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π. –ì–µ—Ç–µ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π, –∞ —Å–µ—Ç–µ—Ä–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–æ–∑–≤–æ–ª—è—Ç–∏ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.

// class Rectangle {
//     #width;
//     #height;

//     constructor ({ height, width }) {
//         this.#width = width;
//         this.#height = height;
//     }

//     get width () {
//         return this.#width;
//     }

//     set width (newWidth) {
//         if (typeof newWidth === 'number' && newWidth > 0) {
//             this.#width = newWidth;
//         } else {
//             console.log('–®–∏—Ä–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º —Ç–∞ –±—ñ–ª—å—à–µ 0');
//         }
//     }

//     get height () {
//         return this.#height;
//     }

//     set height (newHeight) {
//         if (typeof newHeight === 'number' && newHeight > 0) {
//             this.#height = newHeight;
//         } else {
//             console.log('–í–∏—Å–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º —Ç–∞ –±—ñ–ª—å—à–µ 0');
//         }
//     }
// }
// const item = new Rectangle({ width: 10, height: 5 });

// console.log(item.width); // get
// item.width = 12 // set
// console.log(item.width); //get

// console.log(item.height);

// item.height = 20;

// console.log(item.height);





// *******Task-2******* \\
// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å Hero, —è–∫–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≥–µ—Ä–æ—è –∑ –≥—Ä–∏. –ö–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ name, level —Ç–∞ health, –∞ —Ç–∞–∫–æ–∂ –º–µ—Ç–æ–¥–∏ attack —Ç–∞ heal, —â–æ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –≥–µ—Ä–æ—é –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.
// –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≥–µ—Ä–æ—ó–≤

// –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å name –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ–º'—è –≥–µ—Ä–æ—è.
// –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å level –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≥–µ—Ä–æ—è.
// –í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å health –º–∞—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤'—è –≥–µ—Ä–æ—è.
// –ú–µ—Ç–æ–¥ attack –Ω–∞–Ω–æ—Å–∏—Ç—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –≤ —Ä–æ–∑–º—ñ—Ä 10 –æ–¥–∏–Ω–∏—Ü—å. –ú–µ—Ç–æ–¥ heal –¥–æ–¥–∞—î –¥–æ –∑–¥–æ—Ä–æ–≤'—è –≥–µ—Ä–æ—è 10 –æ–¥–∏–Ω–∏—Ü—å.



// class Hero {
//     static counter = 0;
//     static addHero() {
//         this.counter += 1;
//         console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–µ—Ä–æ—ó–≤', this.counter);
//     }

//     name;
//     level;
//     health;

//     constructor (name) {
//         this.name = name;
//         this.level = 1;
//         this.health = 100;
//         Hero.addHero();
//     }

//     attack () {
//         console.log('Attack with 10 points!');
//     }

//     heal () {
//         this.health += 10;
//     }
// }

// const bloodseker = new Hero('Bloodseker');
// // console.log(bloodseker);
// // console.log(bloodseker.heal());
// // console.log(bloodseker);
// console.log(Hero.counter);

// const hero2 = new Hero('Superman');
// console.log(Hero.counter);

const customer = {
    firstName: 'Jacob',
    lastName: 'Mercer',

    getFullName () {
        return `${this.firstName} ${this.lastName}`;
    }
}

function makeMessage (callback) {
    console.log(`–û–±—Ä–æ–±–ª—è—î–º–æ ${callback()}`);
}

makeMessage(customer.getFullName.bind(customer));